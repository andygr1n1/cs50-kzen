schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "goals"
"""
type goals {
  created_at: timestamptz!
  deleted_at: timestamptz
  description: String!
  difficulty: String!
  finished_at: timestamptz

  """An object relationship"""
  goal_ritual: goals_rituals
  id: uuid!
  is_favorite: Boolean!
  owner_id: uuid!
  parent_goal_id: uuid
  privacy: String
  slogan: String!
  status: String!
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "goals"
"""
type goals_aggregate {
  aggregate: goals_aggregate_fields
  nodes: [goals!]!
}

"""
aggregate fields of "goals"
"""
type goals_aggregate_fields {
  count(columns: [goals_select_column!], distinct: Boolean): Int!
  max: goals_max_fields
  min: goals_min_fields
}

"""
Boolean expression to filter rows from the table "goals". All fields are combined with a logical 'AND'.
"""
input goals_bool_exp {
  _and: [goals_bool_exp!]
  _not: goals_bool_exp
  _or: [goals_bool_exp!]
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  description: String_comparison_exp
  difficulty: String_comparison_exp
  finished_at: timestamptz_comparison_exp
  goal_ritual: goals_rituals_bool_exp
  id: uuid_comparison_exp
  is_favorite: Boolean_comparison_exp
  owner_id: uuid_comparison_exp
  parent_goal_id: uuid_comparison_exp
  privacy: String_comparison_exp
  slogan: String_comparison_exp
  status: String_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "goals"
"""
enum goals_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  goals_pkey
}

"""
input type for inserting data into table "goals"
"""
input goals_insert_input {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  goal_ritual: goals_rituals_obj_rel_insert_input
  id: uuid
  is_favorite: Boolean
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type goals_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type goals_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "goals"
"""
type goals_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goals!]!
}

"""
on_conflict condition type for table "goals"
"""
input goals_on_conflict {
  constraint: goals_constraint!
  update_columns: [goals_update_column!]! = []
  where: goals_bool_exp
}

"""Ordering options when selecting data from "goals"."""
input goals_order_by {
  created_at: order_by
  deleted_at: order_by
  description: order_by
  difficulty: order_by
  finished_at: order_by
  goal_ritual: goals_rituals_order_by
  id: order_by
  is_favorite: order_by
  owner_id: order_by
  parent_goal_id: order_by
  privacy: order_by
  slogan: order_by
  status: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: goals"""
input goals_pk_columns_input {
  id: uuid!
}

"""
columns and relationships of "goals_rituals"
"""
type goals_rituals {
  created_at: timestamptz!
  goal_id: uuid!
  ritual_id: uuid!
  ritual_interval: Int!
  ritual_power: Int!
  ritual_type: String!
}

"""
aggregated selection of "goals_rituals"
"""
type goals_rituals_aggregate {
  aggregate: goals_rituals_aggregate_fields
  nodes: [goals_rituals!]!
}

"""
aggregate fields of "goals_rituals"
"""
type goals_rituals_aggregate_fields {
  avg: goals_rituals_avg_fields
  count(columns: [goals_rituals_select_column!], distinct: Boolean): Int!
  max: goals_rituals_max_fields
  min: goals_rituals_min_fields
  stddev: goals_rituals_stddev_fields
  stddev_pop: goals_rituals_stddev_pop_fields
  stddev_samp: goals_rituals_stddev_samp_fields
  sum: goals_rituals_sum_fields
  var_pop: goals_rituals_var_pop_fields
  var_samp: goals_rituals_var_samp_fields
  variance: goals_rituals_variance_fields
}

"""aggregate avg on columns"""
type goals_rituals_avg_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
Boolean expression to filter rows from the table "goals_rituals". All fields are combined with a logical 'AND'.
"""
input goals_rituals_bool_exp {
  _and: [goals_rituals_bool_exp!]
  _not: goals_rituals_bool_exp
  _or: [goals_rituals_bool_exp!]
  created_at: timestamptz_comparison_exp
  goal_id: uuid_comparison_exp
  ritual_id: uuid_comparison_exp
  ritual_interval: Int_comparison_exp
  ritual_power: Int_comparison_exp
  ritual_type: String_comparison_exp
}

"""
unique or primary key constraints on table "goals_rituals"
"""
enum goals_rituals_constraint {
  """
  unique or primary key constraint on columns "ritual_id", "goal_id"
  """
  goals_rituals_pkey
}

"""
input type for incrementing numeric columns in table "goals_rituals"
"""
input goals_rituals_inc_input {
  ritual_interval: Int
  ritual_power: Int
}

"""
input type for inserting data into table "goals_rituals"
"""
input goals_rituals_insert_input {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""aggregate max on columns"""
type goals_rituals_max_fields {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""aggregate min on columns"""
type goals_rituals_min_fields {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""
response of any mutation on the table "goals_rituals"
"""
type goals_rituals_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goals_rituals!]!
}

"""
input type for inserting object relation for remote table "goals_rituals"
"""
input goals_rituals_obj_rel_insert_input {
  data: goals_rituals_insert_input!

  """upsert condition"""
  on_conflict: goals_rituals_on_conflict
}

"""
on_conflict condition type for table "goals_rituals"
"""
input goals_rituals_on_conflict {
  constraint: goals_rituals_constraint!
  update_columns: [goals_rituals_update_column!]! = []
  where: goals_rituals_bool_exp
}

"""Ordering options when selecting data from "goals_rituals"."""
input goals_rituals_order_by {
  created_at: order_by
  goal_id: order_by
  ritual_id: order_by
  ritual_interval: order_by
  ritual_power: order_by
  ritual_type: order_by
}

"""primary key columns input for table: goals_rituals"""
input goals_rituals_pk_columns_input {
  goal_id: uuid!
  ritual_id: uuid!
}

"""
select columns of table "goals_rituals"
"""
enum goals_rituals_select_column {
  """column name"""
  created_at

  """column name"""
  goal_id

  """column name"""
  ritual_id

  """column name"""
  ritual_interval

  """column name"""
  ritual_power

  """column name"""
  ritual_type
}

"""
input type for updating data in table "goals_rituals"
"""
input goals_rituals_set_input {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""aggregate stddev on columns"""
type goals_rituals_stddev_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""aggregate stddev_pop on columns"""
type goals_rituals_stddev_pop_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""aggregate stddev_samp on columns"""
type goals_rituals_stddev_samp_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
Streaming cursor of the table "goals_rituals"
"""
input goals_rituals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goals_rituals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goals_rituals_stream_cursor_value_input {
  created_at: timestamptz
  goal_id: uuid
  ritual_id: uuid
  ritual_interval: Int
  ritual_power: Int
  ritual_type: String
}

"""aggregate sum on columns"""
type goals_rituals_sum_fields {
  ritual_interval: Int
  ritual_power: Int
}

"""
update columns of table "goals_rituals"
"""
enum goals_rituals_update_column {
  """column name"""
  created_at

  """column name"""
  goal_id

  """column name"""
  ritual_id

  """column name"""
  ritual_interval

  """column name"""
  ritual_power

  """column name"""
  ritual_type
}

input goals_rituals_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: goals_rituals_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: goals_rituals_set_input

  """filter the rows which have to be updated"""
  where: goals_rituals_bool_exp!
}

"""aggregate var_pop on columns"""
type goals_rituals_var_pop_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""aggregate var_samp on columns"""
type goals_rituals_var_samp_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""aggregate variance on columns"""
type goals_rituals_variance_fields {
  ritual_interval: Float
  ritual_power: Float
}

"""
select columns of table "goals"
"""
enum goals_select_column {
  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  difficulty

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  is_favorite

  """column name"""
  owner_id

  """column name"""
  parent_goal_id

  """column name"""
  privacy

  """column name"""
  slogan

  """column name"""
  status

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "goals"
"""
input goals_set_input {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  is_favorite: Boolean
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""
columns and relationships of "goals_slides"
"""
type goals_slides {
  active: Boolean!
  created_at: timestamptz!
  deleted_at: timestamptz
  id: uuid!
  img_path: String
  owner_id: uuid!
  title: String
  updated_at: timestamptz!
}

"""
aggregated selection of "goals_slides"
"""
type goals_slides_aggregate {
  aggregate: goals_slides_aggregate_fields
  nodes: [goals_slides!]!
}

input goals_slides_aggregate_bool_exp {
  bool_and: goals_slides_aggregate_bool_exp_bool_and
  bool_or: goals_slides_aggregate_bool_exp_bool_or
  count: goals_slides_aggregate_bool_exp_count
}

input goals_slides_aggregate_bool_exp_bool_and {
  arguments: goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: goals_slides_bool_exp
  predicate: Boolean_comparison_exp!
}

input goals_slides_aggregate_bool_exp_bool_or {
  arguments: goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: goals_slides_bool_exp
  predicate: Boolean_comparison_exp!
}

input goals_slides_aggregate_bool_exp_count {
  arguments: [goals_slides_select_column!]
  distinct: Boolean
  filter: goals_slides_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "goals_slides"
"""
type goals_slides_aggregate_fields {
  count(columns: [goals_slides_select_column!], distinct: Boolean): Int!
  max: goals_slides_max_fields
  min: goals_slides_min_fields
}

"""
order by aggregate values of table "goals_slides"
"""
input goals_slides_aggregate_order_by {
  count: order_by
  max: goals_slides_max_order_by
  min: goals_slides_min_order_by
}

"""
input type for inserting array relation for remote table "goals_slides"
"""
input goals_slides_arr_rel_insert_input {
  data: [goals_slides_insert_input!]!

  """upsert condition"""
  on_conflict: goals_slides_on_conflict
}

"""
Boolean expression to filter rows from the table "goals_slides". All fields are combined with a logical 'AND'.
"""
input goals_slides_bool_exp {
  _and: [goals_slides_bool_exp!]
  _not: goals_slides_bool_exp
  _or: [goals_slides_bool_exp!]
  active: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  deleted_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  img_path: String_comparison_exp
  owner_id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "goals_slides"
"""
enum goals_slides_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  goals_slides_pkey
}

"""
input type for inserting data into table "goals_slides"
"""
input goals_slides_insert_input {
  active: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type goals_slides_max_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "goals_slides"
"""
input goals_slides_max_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type goals_slides_min_fields {
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "goals_slides"
"""
input goals_slides_min_order_by {
  created_at: order_by
  deleted_at: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "goals_slides"
"""
type goals_slides_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [goals_slides!]!
}

"""
on_conflict condition type for table "goals_slides"
"""
input goals_slides_on_conflict {
  constraint: goals_slides_constraint!
  update_columns: [goals_slides_update_column!]! = []
  where: goals_slides_bool_exp
}

"""Ordering options when selecting data from "goals_slides"."""
input goals_slides_order_by {
  active: order_by
  created_at: order_by
  deleted_at: order_by
  id: order_by
  img_path: order_by
  owner_id: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: goals_slides"""
input goals_slides_pk_columns_input {
  id: uuid!
}

"""
select columns of table "goals_slides"
"""
enum goals_slides_select_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  owner_id

  """column name"""
  title

  """column name"""
  updated_at
}

"""
select "goals_slides_aggregate_bool_exp_bool_and_arguments_columns" columns of table "goals_slides"
"""
enum goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  active
}

"""
select "goals_slides_aggregate_bool_exp_bool_or_arguments_columns" columns of table "goals_slides"
"""
enum goals_slides_select_column_goals_slides_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  active
}

"""
input type for updating data in table "goals_slides"
"""
input goals_slides_set_input {
  active: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "goals_slides"
"""
input goals_slides_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goals_slides_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goals_slides_stream_cursor_value_input {
  active: Boolean
  created_at: timestamptz
  deleted_at: timestamptz
  id: uuid
  img_path: String
  owner_id: uuid
  title: String
  updated_at: timestamptz
}

"""
update columns of table "goals_slides"
"""
enum goals_slides_update_column {
  """column name"""
  active

  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  id

  """column name"""
  img_path

  """column name"""
  owner_id

  """column name"""
  title

  """column name"""
  updated_at
}

input goals_slides_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: goals_slides_set_input

  """filter the rows which have to be updated"""
  where: goals_slides_bool_exp!
}

"""
Streaming cursor of the table "goals"
"""
input goals_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: goals_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input goals_stream_cursor_value_input {
  created_at: timestamptz
  deleted_at: timestamptz
  description: String
  difficulty: String
  finished_at: timestamptz
  id: uuid
  is_favorite: Boolean
  owner_id: uuid
  parent_goal_id: uuid
  privacy: String
  slogan: String
  status: String
  title: String
  updated_at: timestamptz
}

"""
update columns of table "goals"
"""
enum goals_update_column {
  """column name"""
  created_at

  """column name"""
  deleted_at

  """column name"""
  description

  """column name"""
  difficulty

  """column name"""
  finished_at

  """column name"""
  id

  """column name"""
  is_favorite

  """column name"""
  owner_id

  """column name"""
  parent_goal_id

  """column name"""
  privacy

  """column name"""
  slogan

  """column name"""
  status

  """column name"""
  title

  """column name"""
  updated_at
}

input goals_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: goals_set_input

  """filter the rows which have to be updated"""
  where: goals_bool_exp!
}

"""
columns and relationships of "heroes"
"""
type heroes {
  avatar: String
  birthday: timestamptz
  coins: Int!
  created_at: timestamptz!
  email: String!

  """An array relationship"""
  goals_slides(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """An aggregate relationship"""
  goals_slides_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): goals_slides_aggregate!
  id: uuid!
  name: String!
  password: String
  phone: String
  role: heroes_roles_enum

  """An array relationship"""
  tokens(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """An aggregate relationship"""
  tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): heroes_tokens_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "heroes"
"""
type heroes_aggregate {
  aggregate: heroes_aggregate_fields
  nodes: [heroes!]!
}

"""
aggregate fields of "heroes"
"""
type heroes_aggregate_fields {
  avg: heroes_avg_fields
  count(columns: [heroes_select_column!], distinct: Boolean): Int!
  max: heroes_max_fields
  min: heroes_min_fields
  stddev: heroes_stddev_fields
  stddev_pop: heroes_stddev_pop_fields
  stddev_samp: heroes_stddev_samp_fields
  sum: heroes_sum_fields
  var_pop: heroes_var_pop_fields
  var_samp: heroes_var_samp_fields
  variance: heroes_variance_fields
}

"""aggregate avg on columns"""
type heroes_avg_fields {
  coins: Float
}

"""
Boolean expression to filter rows from the table "heroes". All fields are combined with a logical 'AND'.
"""
input heroes_bool_exp {
  _and: [heroes_bool_exp!]
  _not: heroes_bool_exp
  _or: [heroes_bool_exp!]
  avatar: String_comparison_exp
  birthday: timestamptz_comparison_exp
  coins: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  goals_slides: goals_slides_bool_exp
  goals_slides_aggregate: goals_slides_aggregate_bool_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  password: String_comparison_exp
  phone: String_comparison_exp
  role: heroes_roles_enum_comparison_exp
  tokens: heroes_tokens_bool_exp
  tokens_aggregate: heroes_tokens_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "heroes"
"""
enum heroes_constraint {
  """
  unique or primary key constraint on columns "email"
  """
  heroes_email_key

  """
  unique or primary key constraint on columns "id"
  """
  heroes_pkey
}

"""
input type for incrementing numeric columns in table "heroes"
"""
input heroes_inc_input {
  coins: Int
}

"""
input type for inserting data into table "heroes"
"""
input heroes_insert_input {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  email: String
  goals_slides: goals_slides_arr_rel_insert_input
  id: uuid
  name: String
  password: String
  phone: String
  role: heroes_roles_enum
  tokens: heroes_tokens_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type heroes_max_fields {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type heroes_min_fields {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "heroes"
"""
type heroes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [heroes!]!
}

"""
input type for inserting object relation for remote table "heroes"
"""
input heroes_obj_rel_insert_input {
  data: heroes_insert_input!

  """upsert condition"""
  on_conflict: heroes_on_conflict
}

"""
on_conflict condition type for table "heroes"
"""
input heroes_on_conflict {
  constraint: heroes_constraint!
  update_columns: [heroes_update_column!]! = []
  where: heroes_bool_exp
}

"""Ordering options when selecting data from "heroes"."""
input heroes_order_by {
  avatar: order_by
  birthday: order_by
  coins: order_by
  created_at: order_by
  email: order_by
  goals_slides_aggregate: goals_slides_aggregate_order_by
  id: order_by
  name: order_by
  password: order_by
  phone: order_by
  role: order_by
  tokens_aggregate: heroes_tokens_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: heroes"""
input heroes_pk_columns_input {
  id: uuid!
}

"""
columns and relationships of "heroes_roles"
"""
type heroes_roles {
  description: String
  role: String!
}

"""
aggregated selection of "heroes_roles"
"""
type heroes_roles_aggregate {
  aggregate: heroes_roles_aggregate_fields
  nodes: [heroes_roles!]!
}

"""
aggregate fields of "heroes_roles"
"""
type heroes_roles_aggregate_fields {
  count(columns: [heroes_roles_select_column!], distinct: Boolean): Int!
  max: heroes_roles_max_fields
  min: heroes_roles_min_fields
}

"""
Boolean expression to filter rows from the table "heroes_roles". All fields are combined with a logical 'AND'.
"""
input heroes_roles_bool_exp {
  _and: [heroes_roles_bool_exp!]
  _not: heroes_roles_bool_exp
  _or: [heroes_roles_bool_exp!]
  description: String_comparison_exp
  role: String_comparison_exp
}

"""
unique or primary key constraints on table "heroes_roles"
"""
enum heroes_roles_constraint {
  """
  unique or primary key constraint on columns "role"
  """
  heroes_roles_pkey
}

enum heroes_roles_enum {
  admin
  guest
  hero
  super_hero
}

"""
Boolean expression to compare columns of type "heroes_roles_enum". All fields are combined with logical 'AND'.
"""
input heroes_roles_enum_comparison_exp {
  _eq: heroes_roles_enum
  _in: [heroes_roles_enum!]
  _is_null: Boolean
  _neq: heroes_roles_enum
  _nin: [heroes_roles_enum!]
}

"""
input type for inserting data into table "heroes_roles"
"""
input heroes_roles_insert_input {
  description: String
  role: String
}

"""aggregate max on columns"""
type heroes_roles_max_fields {
  description: String
  role: String
}

"""aggregate min on columns"""
type heroes_roles_min_fields {
  description: String
  role: String
}

"""
response of any mutation on the table "heroes_roles"
"""
type heroes_roles_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [heroes_roles!]!
}

"""
on_conflict condition type for table "heroes_roles"
"""
input heroes_roles_on_conflict {
  constraint: heroes_roles_constraint!
  update_columns: [heroes_roles_update_column!]! = []
  where: heroes_roles_bool_exp
}

"""Ordering options when selecting data from "heroes_roles"."""
input heroes_roles_order_by {
  description: order_by
  role: order_by
}

"""primary key columns input for table: heroes_roles"""
input heroes_roles_pk_columns_input {
  role: String!
}

"""
select columns of table "heroes_roles"
"""
enum heroes_roles_select_column {
  """column name"""
  description

  """column name"""
  role
}

"""
input type for updating data in table "heroes_roles"
"""
input heroes_roles_set_input {
  description: String
  role: String
}

"""
Streaming cursor of the table "heroes_roles"
"""
input heroes_roles_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: heroes_roles_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input heroes_roles_stream_cursor_value_input {
  description: String
  role: String
}

"""
update columns of table "heroes_roles"
"""
enum heroes_roles_update_column {
  """column name"""
  description

  """column name"""
  role
}

input heroes_roles_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: heroes_roles_set_input

  """filter the rows which have to be updated"""
  where: heroes_roles_bool_exp!
}

"""
select columns of table "heroes"
"""
enum heroes_select_column {
  """column name"""
  avatar

  """column name"""
  birthday

  """column name"""
  coins

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  role

  """column name"""
  updated_at
}

"""
input type for updating data in table "heroes"
"""
input heroes_set_input {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  role: heroes_roles_enum
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type heroes_stddev_fields {
  coins: Float
}

"""aggregate stddev_pop on columns"""
type heroes_stddev_pop_fields {
  coins: Float
}

"""aggregate stddev_samp on columns"""
type heroes_stddev_samp_fields {
  coins: Float
}

"""
Streaming cursor of the table "heroes"
"""
input heroes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: heroes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input heroes_stream_cursor_value_input {
  avatar: String
  birthday: timestamptz
  coins: Int
  created_at: timestamptz
  email: String
  id: uuid
  name: String
  password: String
  phone: String
  role: heroes_roles_enum
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type heroes_sum_fields {
  coins: Int
}

"""
columns and relationships of "heroes_tokens"
"""
type heroes_tokens {
  """An object relationship"""
  hero: heroes!
  hero_id: uuid!
  session_id: uuid!
  token: String
}

"""
aggregated selection of "heroes_tokens"
"""
type heroes_tokens_aggregate {
  aggregate: heroes_tokens_aggregate_fields
  nodes: [heroes_tokens!]!
}

input heroes_tokens_aggregate_bool_exp {
  count: heroes_tokens_aggregate_bool_exp_count
}

input heroes_tokens_aggregate_bool_exp_count {
  arguments: [heroes_tokens_select_column!]
  distinct: Boolean
  filter: heroes_tokens_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "heroes_tokens"
"""
type heroes_tokens_aggregate_fields {
  count(columns: [heroes_tokens_select_column!], distinct: Boolean): Int!
  max: heroes_tokens_max_fields
  min: heroes_tokens_min_fields
}

"""
order by aggregate values of table "heroes_tokens"
"""
input heroes_tokens_aggregate_order_by {
  count: order_by
  max: heroes_tokens_max_order_by
  min: heroes_tokens_min_order_by
}

"""
input type for inserting array relation for remote table "heroes_tokens"
"""
input heroes_tokens_arr_rel_insert_input {
  data: [heroes_tokens_insert_input!]!

  """upsert condition"""
  on_conflict: heroes_tokens_on_conflict
}

"""
Boolean expression to filter rows from the table "heroes_tokens". All fields are combined with a logical 'AND'.
"""
input heroes_tokens_bool_exp {
  _and: [heroes_tokens_bool_exp!]
  _not: heroes_tokens_bool_exp
  _or: [heroes_tokens_bool_exp!]
  hero: heroes_bool_exp
  hero_id: uuid_comparison_exp
  session_id: uuid_comparison_exp
  token: String_comparison_exp
}

"""
unique or primary key constraints on table "heroes_tokens"
"""
enum heroes_tokens_constraint {
  """
  unique or primary key constraint on columns "session_id"
  """
  heroes_tokens_pkey
}

"""
input type for inserting data into table "heroes_tokens"
"""
input heroes_tokens_insert_input {
  hero: heroes_obj_rel_insert_input
  hero_id: uuid
  session_id: uuid
  token: String
}

"""aggregate max on columns"""
type heroes_tokens_max_fields {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
order by max() on columns of table "heroes_tokens"
"""
input heroes_tokens_max_order_by {
  hero_id: order_by
  session_id: order_by
  token: order_by
}

"""aggregate min on columns"""
type heroes_tokens_min_fields {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
order by min() on columns of table "heroes_tokens"
"""
input heroes_tokens_min_order_by {
  hero_id: order_by
  session_id: order_by
  token: order_by
}

"""
response of any mutation on the table "heroes_tokens"
"""
type heroes_tokens_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [heroes_tokens!]!
}

"""
on_conflict condition type for table "heroes_tokens"
"""
input heroes_tokens_on_conflict {
  constraint: heroes_tokens_constraint!
  update_columns: [heroes_tokens_update_column!]! = []
  where: heroes_tokens_bool_exp
}

"""Ordering options when selecting data from "heroes_tokens"."""
input heroes_tokens_order_by {
  hero: heroes_order_by
  hero_id: order_by
  session_id: order_by
  token: order_by
}

"""primary key columns input for table: heroes_tokens"""
input heroes_tokens_pk_columns_input {
  session_id: uuid!
}

"""
select columns of table "heroes_tokens"
"""
enum heroes_tokens_select_column {
  """column name"""
  hero_id

  """column name"""
  session_id

  """column name"""
  token
}

"""
input type for updating data in table "heroes_tokens"
"""
input heroes_tokens_set_input {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
Streaming cursor of the table "heroes_tokens"
"""
input heroes_tokens_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: heroes_tokens_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input heroes_tokens_stream_cursor_value_input {
  hero_id: uuid
  session_id: uuid
  token: String
}

"""
update columns of table "heroes_tokens"
"""
enum heroes_tokens_update_column {
  """column name"""
  hero_id

  """column name"""
  session_id

  """column name"""
  token
}

input heroes_tokens_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: heroes_tokens_set_input

  """filter the rows which have to be updated"""
  where: heroes_tokens_bool_exp!
}

"""
update columns of table "heroes"
"""
enum heroes_update_column {
  """column name"""
  avatar

  """column name"""
  birthday

  """column name"""
  coins

  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  name

  """column name"""
  password

  """column name"""
  phone

  """column name"""
  role

  """column name"""
  updated_at
}

input heroes_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: heroes_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: heroes_set_input

  """filter the rows which have to be updated"""
  where: heroes_bool_exp!
}

"""aggregate var_pop on columns"""
type heroes_var_pop_fields {
  coins: Float
}

"""aggregate var_samp on columns"""
type heroes_var_samp_fields {
  coins: Float
}

"""aggregate variance on columns"""
type heroes_variance_fields {
  coins: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "goals"
  """
  delete_goals(
    """filter the rows which have to be deleted"""
    where: goals_bool_exp!
  ): goals_mutation_response

  """
  delete single row from the table: "goals"
  """
  delete_goals_by_pk(id: uuid!): goals

  """
  delete data from the table: "goals_rituals"
  """
  delete_goals_rituals(
    """filter the rows which have to be deleted"""
    where: goals_rituals_bool_exp!
  ): goals_rituals_mutation_response

  """
  delete single row from the table: "goals_rituals"
  """
  delete_goals_rituals_by_pk(goal_id: uuid!, ritual_id: uuid!): goals_rituals

  """
  delete data from the table: "goals_slides"
  """
  delete_goals_slides(
    """filter the rows which have to be deleted"""
    where: goals_slides_bool_exp!
  ): goals_slides_mutation_response

  """
  delete single row from the table: "goals_slides"
  """
  delete_goals_slides_by_pk(id: uuid!): goals_slides

  """
  delete data from the table: "heroes"
  """
  delete_heroes(
    """filter the rows which have to be deleted"""
    where: heroes_bool_exp!
  ): heroes_mutation_response

  """
  delete single row from the table: "heroes"
  """
  delete_heroes_by_pk(id: uuid!): heroes

  """
  delete data from the table: "heroes_roles"
  """
  delete_heroes_roles(
    """filter the rows which have to be deleted"""
    where: heroes_roles_bool_exp!
  ): heroes_roles_mutation_response

  """
  delete single row from the table: "heroes_roles"
  """
  delete_heroes_roles_by_pk(role: String!): heroes_roles

  """
  delete data from the table: "heroes_tokens"
  """
  delete_heroes_tokens(
    """filter the rows which have to be deleted"""
    where: heroes_tokens_bool_exp!
  ): heroes_tokens_mutation_response

  """
  delete single row from the table: "heroes_tokens"
  """
  delete_heroes_tokens_by_pk(session_id: uuid!): heroes_tokens

  """
  delete data from the table: "notepad"
  """
  delete_notepad(
    """filter the rows which have to be deleted"""
    where: notepad_bool_exp!
  ): notepad_mutation_response

  """
  delete single row from the table: "notepad"
  """
  delete_notepad_by_pk(owner_id: uuid!): notepad

  """
  delete data from the table: "restore_codes"
  """
  delete_restore_codes(
    """filter the rows which have to be deleted"""
    where: restore_codes_bool_exp!
  ): restore_codes_mutation_response

  """
  delete single row from the table: "restore_codes"
  """
  delete_restore_codes_by_pk(id: uuid!): restore_codes

  """
  insert data into the table: "goals"
  """
  insert_goals(
    """the rows to be inserted"""
    objects: [goals_insert_input!]!

    """upsert condition"""
    on_conflict: goals_on_conflict
  ): goals_mutation_response

  """
  insert a single row into the table: "goals"
  """
  insert_goals_one(
    """the row to be inserted"""
    object: goals_insert_input!

    """upsert condition"""
    on_conflict: goals_on_conflict
  ): goals

  """
  insert data into the table: "goals_rituals"
  """
  insert_goals_rituals(
    """the rows to be inserted"""
    objects: [goals_rituals_insert_input!]!

    """upsert condition"""
    on_conflict: goals_rituals_on_conflict
  ): goals_rituals_mutation_response

  """
  insert a single row into the table: "goals_rituals"
  """
  insert_goals_rituals_one(
    """the row to be inserted"""
    object: goals_rituals_insert_input!

    """upsert condition"""
    on_conflict: goals_rituals_on_conflict
  ): goals_rituals

  """
  insert data into the table: "goals_slides"
  """
  insert_goals_slides(
    """the rows to be inserted"""
    objects: [goals_slides_insert_input!]!

    """upsert condition"""
    on_conflict: goals_slides_on_conflict
  ): goals_slides_mutation_response

  """
  insert a single row into the table: "goals_slides"
  """
  insert_goals_slides_one(
    """the row to be inserted"""
    object: goals_slides_insert_input!

    """upsert condition"""
    on_conflict: goals_slides_on_conflict
  ): goals_slides

  """
  insert data into the table: "heroes"
  """
  insert_heroes(
    """the rows to be inserted"""
    objects: [heroes_insert_input!]!

    """upsert condition"""
    on_conflict: heroes_on_conflict
  ): heroes_mutation_response

  """
  insert a single row into the table: "heroes"
  """
  insert_heroes_one(
    """the row to be inserted"""
    object: heroes_insert_input!

    """upsert condition"""
    on_conflict: heroes_on_conflict
  ): heroes

  """
  insert data into the table: "heroes_roles"
  """
  insert_heroes_roles(
    """the rows to be inserted"""
    objects: [heroes_roles_insert_input!]!

    """upsert condition"""
    on_conflict: heroes_roles_on_conflict
  ): heroes_roles_mutation_response

  """
  insert a single row into the table: "heroes_roles"
  """
  insert_heroes_roles_one(
    """the row to be inserted"""
    object: heroes_roles_insert_input!

    """upsert condition"""
    on_conflict: heroes_roles_on_conflict
  ): heroes_roles

  """
  insert data into the table: "heroes_tokens"
  """
  insert_heroes_tokens(
    """the rows to be inserted"""
    objects: [heroes_tokens_insert_input!]!

    """upsert condition"""
    on_conflict: heroes_tokens_on_conflict
  ): heroes_tokens_mutation_response

  """
  insert a single row into the table: "heroes_tokens"
  """
  insert_heroes_tokens_one(
    """the row to be inserted"""
    object: heroes_tokens_insert_input!

    """upsert condition"""
    on_conflict: heroes_tokens_on_conflict
  ): heroes_tokens

  """
  insert data into the table: "notepad"
  """
  insert_notepad(
    """the rows to be inserted"""
    objects: [notepad_insert_input!]!

    """upsert condition"""
    on_conflict: notepad_on_conflict
  ): notepad_mutation_response

  """
  insert a single row into the table: "notepad"
  """
  insert_notepad_one(
    """the row to be inserted"""
    object: notepad_insert_input!

    """upsert condition"""
    on_conflict: notepad_on_conflict
  ): notepad

  """
  insert data into the table: "restore_codes"
  """
  insert_restore_codes(
    """the rows to be inserted"""
    objects: [restore_codes_insert_input!]!

    """upsert condition"""
    on_conflict: restore_codes_on_conflict
  ): restore_codes_mutation_response

  """
  insert a single row into the table: "restore_codes"
  """
  insert_restore_codes_one(
    """the row to be inserted"""
    object: restore_codes_insert_input!

    """upsert condition"""
    on_conflict: restore_codes_on_conflict
  ): restore_codes

  """
  update data of the table: "goals"
  """
  update_goals(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_set_input

    """filter the rows which have to be updated"""
    where: goals_bool_exp!
  ): goals_mutation_response

  """
  update single row of the table: "goals"
  """
  update_goals_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_set_input
    pk_columns: goals_pk_columns_input!
  ): goals

  """
  update multiples rows of table: "goals"
  """
  update_goals_many(
    """updates to execute, in order"""
    updates: [goals_updates!]!
  ): [goals_mutation_response]

  """
  update data of the table: "goals_rituals"
  """
  update_goals_rituals(
    """increments the numeric columns with given value of the filtered values"""
    _inc: goals_rituals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: goals_rituals_set_input

    """filter the rows which have to be updated"""
    where: goals_rituals_bool_exp!
  ): goals_rituals_mutation_response

  """
  update single row of the table: "goals_rituals"
  """
  update_goals_rituals_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: goals_rituals_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: goals_rituals_set_input
    pk_columns: goals_rituals_pk_columns_input!
  ): goals_rituals

  """
  update multiples rows of table: "goals_rituals"
  """
  update_goals_rituals_many(
    """updates to execute, in order"""
    updates: [goals_rituals_updates!]!
  ): [goals_rituals_mutation_response]

  """
  update data of the table: "goals_slides"
  """
  update_goals_slides(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_slides_set_input

    """filter the rows which have to be updated"""
    where: goals_slides_bool_exp!
  ): goals_slides_mutation_response

  """
  update single row of the table: "goals_slides"
  """
  update_goals_slides_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: goals_slides_set_input
    pk_columns: goals_slides_pk_columns_input!
  ): goals_slides

  """
  update multiples rows of table: "goals_slides"
  """
  update_goals_slides_many(
    """updates to execute, in order"""
    updates: [goals_slides_updates!]!
  ): [goals_slides_mutation_response]

  """
  update data of the table: "heroes"
  """
  update_heroes(
    """increments the numeric columns with given value of the filtered values"""
    _inc: heroes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: heroes_set_input

    """filter the rows which have to be updated"""
    where: heroes_bool_exp!
  ): heroes_mutation_response

  """
  update single row of the table: "heroes"
  """
  update_heroes_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: heroes_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: heroes_set_input
    pk_columns: heroes_pk_columns_input!
  ): heroes

  """
  update multiples rows of table: "heroes"
  """
  update_heroes_many(
    """updates to execute, in order"""
    updates: [heroes_updates!]!
  ): [heroes_mutation_response]

  """
  update data of the table: "heroes_roles"
  """
  update_heroes_roles(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_roles_set_input

    """filter the rows which have to be updated"""
    where: heroes_roles_bool_exp!
  ): heroes_roles_mutation_response

  """
  update single row of the table: "heroes_roles"
  """
  update_heroes_roles_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_roles_set_input
    pk_columns: heroes_roles_pk_columns_input!
  ): heroes_roles

  """
  update multiples rows of table: "heroes_roles"
  """
  update_heroes_roles_many(
    """updates to execute, in order"""
    updates: [heroes_roles_updates!]!
  ): [heroes_roles_mutation_response]

  """
  update data of the table: "heroes_tokens"
  """
  update_heroes_tokens(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_tokens_set_input

    """filter the rows which have to be updated"""
    where: heroes_tokens_bool_exp!
  ): heroes_tokens_mutation_response

  """
  update single row of the table: "heroes_tokens"
  """
  update_heroes_tokens_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: heroes_tokens_set_input
    pk_columns: heroes_tokens_pk_columns_input!
  ): heroes_tokens

  """
  update multiples rows of table: "heroes_tokens"
  """
  update_heroes_tokens_many(
    """updates to execute, in order"""
    updates: [heroes_tokens_updates!]!
  ): [heroes_tokens_mutation_response]

  """
  update data of the table: "notepad"
  """
  update_notepad(
    """sets the columns of the filtered rows to the given values"""
    _set: notepad_set_input

    """filter the rows which have to be updated"""
    where: notepad_bool_exp!
  ): notepad_mutation_response

  """
  update single row of the table: "notepad"
  """
  update_notepad_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: notepad_set_input
    pk_columns: notepad_pk_columns_input!
  ): notepad

  """
  update multiples rows of table: "notepad"
  """
  update_notepad_many(
    """updates to execute, in order"""
    updates: [notepad_updates!]!
  ): [notepad_mutation_response]

  """
  update data of the table: "restore_codes"
  """
  update_restore_codes(
    """sets the columns of the filtered rows to the given values"""
    _set: restore_codes_set_input

    """filter the rows which have to be updated"""
    where: restore_codes_bool_exp!
  ): restore_codes_mutation_response

  """
  update single row of the table: "restore_codes"
  """
  update_restore_codes_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: restore_codes_set_input
    pk_columns: restore_codes_pk_columns_input!
  ): restore_codes

  """
  update multiples rows of table: "restore_codes"
  """
  update_restore_codes_many(
    """updates to execute, in order"""
    updates: [restore_codes_updates!]!
  ): [restore_codes_mutation_response]
}

"""
columns and relationships of "notepad"
"""
type notepad {
  description: String!
  id: uuid!
  locked: Boolean!
  owner_id: uuid!
}

"""
aggregated selection of "notepad"
"""
type notepad_aggregate {
  aggregate: notepad_aggregate_fields
  nodes: [notepad!]!
}

"""
aggregate fields of "notepad"
"""
type notepad_aggregate_fields {
  count(columns: [notepad_select_column!], distinct: Boolean): Int!
  max: notepad_max_fields
  min: notepad_min_fields
}

"""
Boolean expression to filter rows from the table "notepad". All fields are combined with a logical 'AND'.
"""
input notepad_bool_exp {
  _and: [notepad_bool_exp!]
  _not: notepad_bool_exp
  _or: [notepad_bool_exp!]
  description: String_comparison_exp
  id: uuid_comparison_exp
  locked: Boolean_comparison_exp
  owner_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "notepad"
"""
enum notepad_constraint {
  """
  unique or primary key constraint on columns "owner_id"
  """
  notepad_owner_id_key

  """
  unique or primary key constraint on columns "owner_id"
  """
  notepad_pkey
}

"""
input type for inserting data into table "notepad"
"""
input notepad_insert_input {
  description: String
  id: uuid
  locked: Boolean
  owner_id: uuid
}

"""aggregate max on columns"""
type notepad_max_fields {
  description: String
  id: uuid
  owner_id: uuid
}

"""aggregate min on columns"""
type notepad_min_fields {
  description: String
  id: uuid
  owner_id: uuid
}

"""
response of any mutation on the table "notepad"
"""
type notepad_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [notepad!]!
}

"""
on_conflict condition type for table "notepad"
"""
input notepad_on_conflict {
  constraint: notepad_constraint!
  update_columns: [notepad_update_column!]! = []
  where: notepad_bool_exp
}

"""Ordering options when selecting data from "notepad"."""
input notepad_order_by {
  description: order_by
  id: order_by
  locked: order_by
  owner_id: order_by
}

"""primary key columns input for table: notepad"""
input notepad_pk_columns_input {
  owner_id: uuid!
}

"""
select columns of table "notepad"
"""
enum notepad_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  locked

  """column name"""
  owner_id
}

"""
input type for updating data in table "notepad"
"""
input notepad_set_input {
  description: String
  id: uuid
  locked: Boolean
  owner_id: uuid
}

"""
Streaming cursor of the table "notepad"
"""
input notepad_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: notepad_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input notepad_stream_cursor_value_input {
  description: String
  id: uuid
  locked: Boolean
  owner_id: uuid
}

"""
update columns of table "notepad"
"""
enum notepad_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  locked

  """column name"""
  owner_id
}

input notepad_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: notepad_set_input

  """filter the rows which have to be updated"""
  where: notepad_bool_exp!
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "goals"
  """
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch aggregated fields from the table: "goals"
  """
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!

  """fetch data from the table: "goals" using primary key columns"""
  goals_by_pk(id: uuid!): goals

  """
  fetch data from the table: "goals_rituals"
  """
  goals_rituals(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): [goals_rituals!]!

  """
  fetch aggregated fields from the table: "goals_rituals"
  """
  goals_rituals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): goals_rituals_aggregate!

  """fetch data from the table: "goals_rituals" using primary key columns"""
  goals_rituals_by_pk(goal_id: uuid!, ritual_id: uuid!): goals_rituals

  """An array relationship"""
  goals_slides(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """An aggregate relationship"""
  goals_slides_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): goals_slides_aggregate!

  """fetch data from the table: "goals_slides" using primary key columns"""
  goals_slides_by_pk(id: uuid!): goals_slides

  """
  fetch data from the table: "heroes"
  """
  heroes(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): [heroes!]!

  """
  fetch aggregated fields from the table: "heroes"
  """
  heroes_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): heroes_aggregate!

  """fetch data from the table: "heroes" using primary key columns"""
  heroes_by_pk(id: uuid!): heroes

  """
  fetch data from the table: "heroes_roles"
  """
  heroes_roles(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): [heroes_roles!]!

  """
  fetch aggregated fields from the table: "heroes_roles"
  """
  heroes_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): heroes_roles_aggregate!

  """fetch data from the table: "heroes_roles" using primary key columns"""
  heroes_roles_by_pk(role: String!): heroes_roles

  """
  fetch data from the table: "heroes_tokens"
  """
  heroes_tokens(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """
  fetch aggregated fields from the table: "heroes_tokens"
  """
  heroes_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): heroes_tokens_aggregate!

  """fetch data from the table: "heroes_tokens" using primary key columns"""
  heroes_tokens_by_pk(session_id: uuid!): heroes_tokens

  """
  fetch data from the table: "notepad"
  """
  notepad(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): [notepad!]!

  """
  fetch aggregated fields from the table: "notepad"
  """
  notepad_aggregate(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): notepad_aggregate!

  """fetch data from the table: "notepad" using primary key columns"""
  notepad_by_pk(owner_id: uuid!): notepad

  """
  fetch data from the table: "restore_codes"
  """
  restore_codes(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): [restore_codes!]!

  """
  fetch aggregated fields from the table: "restore_codes"
  """
  restore_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): restore_codes_aggregate!

  """fetch data from the table: "restore_codes" using primary key columns"""
  restore_codes_by_pk(id: uuid!): restore_codes
}

"""
columns and relationships of "restore_codes"
"""
type restore_codes {
  created_at: timestamptz!
  email: String
  id: uuid!
  secret: String
}

"""
aggregated selection of "restore_codes"
"""
type restore_codes_aggregate {
  aggregate: restore_codes_aggregate_fields
  nodes: [restore_codes!]!
}

"""
aggregate fields of "restore_codes"
"""
type restore_codes_aggregate_fields {
  count(columns: [restore_codes_select_column!], distinct: Boolean): Int!
  max: restore_codes_max_fields
  min: restore_codes_min_fields
}

"""
Boolean expression to filter rows from the table "restore_codes". All fields are combined with a logical 'AND'.
"""
input restore_codes_bool_exp {
  _and: [restore_codes_bool_exp!]
  _not: restore_codes_bool_exp
  _or: [restore_codes_bool_exp!]
  created_at: timestamptz_comparison_exp
  email: String_comparison_exp
  id: uuid_comparison_exp
  secret: String_comparison_exp
}

"""
unique or primary key constraints on table "restore_codes"
"""
enum restore_codes_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  restore_codes_pkey
}

"""
input type for inserting data into table "restore_codes"
"""
input restore_codes_insert_input {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
}

"""aggregate max on columns"""
type restore_codes_max_fields {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
}

"""aggregate min on columns"""
type restore_codes_min_fields {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
}

"""
response of any mutation on the table "restore_codes"
"""
type restore_codes_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [restore_codes!]!
}

"""
on_conflict condition type for table "restore_codes"
"""
input restore_codes_on_conflict {
  constraint: restore_codes_constraint!
  update_columns: [restore_codes_update_column!]! = []
  where: restore_codes_bool_exp
}

"""Ordering options when selecting data from "restore_codes"."""
input restore_codes_order_by {
  created_at: order_by
  email: order_by
  id: order_by
  secret: order_by
}

"""primary key columns input for table: restore_codes"""
input restore_codes_pk_columns_input {
  id: uuid!
}

"""
select columns of table "restore_codes"
"""
enum restore_codes_select_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  secret
}

"""
input type for updating data in table "restore_codes"
"""
input restore_codes_set_input {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
}

"""
Streaming cursor of the table "restore_codes"
"""
input restore_codes_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: restore_codes_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input restore_codes_stream_cursor_value_input {
  created_at: timestamptz
  email: String
  id: uuid
  secret: String
}

"""
update columns of table "restore_codes"
"""
enum restore_codes_update_column {
  """column name"""
  created_at

  """column name"""
  email

  """column name"""
  id

  """column name"""
  secret
}

input restore_codes_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: restore_codes_set_input

  """filter the rows which have to be updated"""
  where: restore_codes_bool_exp!
}

type subscription_root {
  """
  fetch data from the table: "goals"
  """
  goals(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch aggregated fields from the table: "goals"
  """
  goals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_order_by!]

    """filter the rows returned"""
    where: goals_bool_exp
  ): goals_aggregate!

  """fetch data from the table: "goals" using primary key columns"""
  goals_by_pk(id: uuid!): goals

  """
  fetch data from the table: "goals_rituals"
  """
  goals_rituals(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): [goals_rituals!]!

  """
  fetch aggregated fields from the table: "goals_rituals"
  """
  goals_rituals_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_rituals_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_rituals_order_by!]

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): goals_rituals_aggregate!

  """fetch data from the table: "goals_rituals" using primary key columns"""
  goals_rituals_by_pk(goal_id: uuid!, ritual_id: uuid!): goals_rituals

  """
  fetch data from the table in a streaming manner: "goals_rituals"
  """
  goals_rituals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goals_rituals_stream_cursor_input]!

    """filter the rows returned"""
    where: goals_rituals_bool_exp
  ): [goals_rituals!]!

  """An array relationship"""
  goals_slides(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """An aggregate relationship"""
  goals_slides_aggregate(
    """distinct select on columns"""
    distinct_on: [goals_slides_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [goals_slides_order_by!]

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): goals_slides_aggregate!

  """fetch data from the table: "goals_slides" using primary key columns"""
  goals_slides_by_pk(id: uuid!): goals_slides

  """
  fetch data from the table in a streaming manner: "goals_slides"
  """
  goals_slides_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goals_slides_stream_cursor_input]!

    """filter the rows returned"""
    where: goals_slides_bool_exp
  ): [goals_slides!]!

  """
  fetch data from the table in a streaming manner: "goals"
  """
  goals_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [goals_stream_cursor_input]!

    """filter the rows returned"""
    where: goals_bool_exp
  ): [goals!]!

  """
  fetch data from the table: "heroes"
  """
  heroes(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): [heroes!]!

  """
  fetch aggregated fields from the table: "heroes"
  """
  heroes_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_order_by!]

    """filter the rows returned"""
    where: heroes_bool_exp
  ): heroes_aggregate!

  """fetch data from the table: "heroes" using primary key columns"""
  heroes_by_pk(id: uuid!): heroes

  """
  fetch data from the table: "heroes_roles"
  """
  heroes_roles(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): [heroes_roles!]!

  """
  fetch aggregated fields from the table: "heroes_roles"
  """
  heroes_roles_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_roles_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_roles_order_by!]

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): heroes_roles_aggregate!

  """fetch data from the table: "heroes_roles" using primary key columns"""
  heroes_roles_by_pk(role: String!): heroes_roles

  """
  fetch data from the table in a streaming manner: "heroes_roles"
  """
  heroes_roles_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [heroes_roles_stream_cursor_input]!

    """filter the rows returned"""
    where: heroes_roles_bool_exp
  ): [heroes_roles!]!

  """
  fetch data from the table in a streaming manner: "heroes"
  """
  heroes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [heroes_stream_cursor_input]!

    """filter the rows returned"""
    where: heroes_bool_exp
  ): [heroes!]!

  """
  fetch data from the table: "heroes_tokens"
  """
  heroes_tokens(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """
  fetch aggregated fields from the table: "heroes_tokens"
  """
  heroes_tokens_aggregate(
    """distinct select on columns"""
    distinct_on: [heroes_tokens_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [heroes_tokens_order_by!]

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): heroes_tokens_aggregate!

  """fetch data from the table: "heroes_tokens" using primary key columns"""
  heroes_tokens_by_pk(session_id: uuid!): heroes_tokens

  """
  fetch data from the table in a streaming manner: "heroes_tokens"
  """
  heroes_tokens_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [heroes_tokens_stream_cursor_input]!

    """filter the rows returned"""
    where: heroes_tokens_bool_exp
  ): [heroes_tokens!]!

  """
  fetch data from the table: "notepad"
  """
  notepad(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): [notepad!]!

  """
  fetch aggregated fields from the table: "notepad"
  """
  notepad_aggregate(
    """distinct select on columns"""
    distinct_on: [notepad_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [notepad_order_by!]

    """filter the rows returned"""
    where: notepad_bool_exp
  ): notepad_aggregate!

  """fetch data from the table: "notepad" using primary key columns"""
  notepad_by_pk(owner_id: uuid!): notepad

  """
  fetch data from the table in a streaming manner: "notepad"
  """
  notepad_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [notepad_stream_cursor_input]!

    """filter the rows returned"""
    where: notepad_bool_exp
  ): [notepad!]!

  """
  fetch data from the table: "restore_codes"
  """
  restore_codes(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): [restore_codes!]!

  """
  fetch aggregated fields from the table: "restore_codes"
  """
  restore_codes_aggregate(
    """distinct select on columns"""
    distinct_on: [restore_codes_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [restore_codes_order_by!]

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): restore_codes_aggregate!

  """fetch data from the table: "restore_codes" using primary key columns"""
  restore_codes_by_pk(id: uuid!): restore_codes

  """
  fetch data from the table in a streaming manner: "restore_codes"
  """
  restore_codes_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [restore_codes_stream_cursor_input]!

    """filter the rows returned"""
    where: restore_codes_bool_exp
  ): [restore_codes!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}